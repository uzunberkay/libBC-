#ifdef SIZE
	int arr[SIZE];
#else
	int arr[19];
#endif // DEBUG
======================================================================================================================================================
	const int x = 10;
	int* ptr = (int*)&x;

	*ptr = 873;

	printf("%d %d ", x, *ptr);
	Bu ub'dir const olan bir deðiþkeni tür dönüþtürme operatorleri vs. ile deðiþtirmek ub'dir. (Tanýmsýz davranýþ).
======================================================================================================================================================
typedef int Mint;

int main()
{
	Mint x = 5;
	printf("%d ", x);

}
typedef bildirimlerinin (pratik) kuralý

1. hangi türe eþ isim vermek istiyorsanýz o türden bir deðiþken tanýmlayýn.
2. tanýmlamanýn baþýna 'typedef' anahtar sözcüðünü yazýn
3. deðiþken ismini vermek istediðiniz tür ismiyle deðiþtiriniz.

typedef int Mint;
typedef float berkay; örnek.
Örnek olarak typedef int counterType ;

typedef double PowerLevel;
int main()
{
	PowerLevel fighter_power = 56.98;
}
typedef double PowerLevel;
typedef double health;

	PowerLevel fighter_power = 56.98;
	health  fighter_health = 98.97;
	double x = 13;

	printf("Fighter Power = %.2f , Health = %.3f , x = %f \n", fighter_power, fighter_power,x);
======================================================================================================================================================

int *ptr = (ar+idx);
	int x = 3, y = 7, z = 5;

	int* arr[] = { &x,&y,&z };

	(*(arr[0]))++;
	printf("Arr[0] : %d ", *arr[0]);

======================================================================================================================================================
	void find_or_print_Test_func(void)
{
	int arr[SIZE];
	for (size_t i = 0; i < SIZE; i++)
	{
		*(arr + i) = i;

	}

	int* p = bclib_find_value(arr, SIZE, 11);
	if (!p)
	{
		printf("YOK\n");
	}
	else
	{
		printf("Var  %d . indis ", p - arr);
	}

	bclib_print_array(arr, SIZE);
}
======================================================================================================================================================
// dosya isminin uzantisi  yoksa ise uzantýsýný .txt yapýnýz.
        // dosyanýn uzantisi jpeg ise uzantisini png yapiniz.
        // dosya uzantýsý .xls ise dosya uzantýsý kaldýrýlacak.
        // bunlarýn biri geçerli deðilse dosya uzantýsýný .dat yap


int main()
{
	
    char str[SIZE];
    char new_file_name[SIZE];
    
    scanf("%s", str);
    strcpy(new_file_name, str);

    char* ptr = strrchr(str, '.');
    if (!ptr)
    {
        strcat(str,".txt");
        //printf("aa");
    }
    else if (!strcmp(ptr, ".jpeg"))
    {
        strcpy(ptr, ".png");
    }
    else if (!strcmp(ptr, ".xls"))
    {
        *ptr = '\0';
    }

    puts(str);
    puts(new_file_name);


}
======================================================================================================================================================
 while(*p!='\0')
 ++p;

 while(*p++)
 ======================================================================================================================================================
     int x = 13;
    int* ptr = &x;
    int** pptr = &ptr;
    int*** ppptr = &pptr;
======================================================================================================================================================
    expression      datatype        Lvalue/R value  
    ==========      ========        ==============
    x                int                l value
    *p               int*               r value
    p                int*               lvalue
    *p               int                lvalue
    &p               int**              rvalue
    ptr              int**              lvalue
    *ptr             int*               lvalue
    **ptr            int                lvalue
======================================================================================================================================================
Bir deðiþkenin türü void olamaz.
void* vptr; olabilir.
======================================================================================================================================================

void    bclib_generic_swap(void* arg1, void* arg2, size_t size)
{
	char* vp1 = (char*)arg1;
	char* vp2 = (char*)arg2;

	while (size--)
	{
		char temp = *vp1;
		*vp1++ = *vp2;
		*vp2++ = temp;
	}

}
void generic_func_test(void)
{
    float x = 3, y = 4;
    int a = 78, b = 39;
    double dval1 = 22.389, dval2 = 56.78;

    printf("X : %f  y : %f \n", x, y);
    bclib_generic_swap(&x, &y, sizeof(float));
    printf("X : %f  y : %f \n", x, y);
    printf("a : %d b : %d \n", a, b);
    bclib_generic_swap(&a, &b, sizeof(int));
    printf("a : %d b : %d \n", a, b);
    printf("dval1 : %f  dval2 : %f \n", dval1, dval2);
    bclib_generic_swap(&dval1, &dval2, sizeof(double));
    printf("dval1 : %f  dval2 : %f \n", dval1, dval2);
}
======================================================================================================================================================
Void pointerlar *vptr gibi kullanýlamaz. dereference deðildir.

======================================================================================================================================================

void bclib_reverse(void* arg, size_t size, size_t sz)
{
	char* vp = (char*)arg;
	char* vpend = (char*)arg + (sz * (size - 1));

	while (vp <= vpend )
	{
		bclib_generic_swap(vp, vpend, sz);
		vpend -= sz;
		vp += sz;

	}
}

void genericReverseTestFunc()
{

    int dizi[SIZE];
    for (size_t i = 0; i < SIZE; i++)
    {
        dizi[i] = i;
    }
    bclib_print_array(dizi, SIZE);
    bclib_reverse(dizi, SIZE, sizeof(int));
    printf("\n Reverse \n ");
    bclib_print_array(dizi, SIZE);

    printf("\n");

    double arr[SIZE] = { 1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,11.1,12.2,13.3,14.4,15.5,16.6,17.7,18.8,19.9,20.2345 };
    for (size_t i = 0; i < SIZE; i++)
    {
        printf("%.2f ", arr[i]);

    }
    bclib_reverse(arr, SIZE, sizeof(double));
    printf("\n");
    printf("\n Reverse \n ");
    for (size_t i = 0; i < SIZE; i++)
    {
        printf("%.2f ", arr[i]);

    }
}
======================================================================================================================================================

void* bclib_memchr(const void* arg, int value, size_t size)
{
	const char* vp = (char*)arg;
	while (size--)
	{
		if (*vp == (char)value)
		{
			return vp;
		}
		*vp++;
	}
	return NULL;
}


void bclib_memchr_test_func(void)
{
    int arr[SIZE];
    for (size_t i = 20; i > 0; --i)
    {

        arr[SIZE - i] = i;

    }
    bclib_print_array(arr, SIZE);
    bclib_buble_sort(arr, SIZE);
    printf("\n\n");
    bclib_print_array(arr, SIZE);
    printf("\n");
    int* ptr = (int*)bclib_memchr(arr, 21, SIZE);
    if (!ptr)
    {
        printf("Bu deger yok ! \n");
    }
    else
    {
        printf("%d degeri %d . indiste. \n", *ptr, ptr - arr);
    }
}

==

    char str[SIZE];
    int ival;
    printf("Bir yazi girin :");
    scanf("%s", str);
    int temp = 0;

    for (int i = 0; i < str[i] != '\0'; ++i)
    {
        if (str[i] >= '0' && str[i] <= '9')
        {
            temp = temp * 10 + str[i] - '0';
        }

    }

    printf("Ival = %d", temp);
    Buna fonk yazcam.
======================================================================================================================================================